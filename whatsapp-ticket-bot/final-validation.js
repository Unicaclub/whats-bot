// TESTE FINAL - VALIDA√á√ÉO COMPLETA DO SISTEMA DE PERSIST√äNCIA
const { DatabaseManager } = require('./database/manager');

async function finalValidation() {
    console.log('üéØ VALIDA√á√ÉO FINAL DO SISTEMA DE PERSIST√äNCIA\n');
    
    try {
        const db = new DatabaseManager();
        
        // =====================================================
        // 1. TESTE DE CONEX√ÉO
        // =====================================================
        console.log('1Ô∏è‚É£ Testando conex√£o com banco...');
        await db.testConnection();
        console.log('   ‚úÖ Conex√£o estabelecida\n');
        
        // =====================================================
        // 2. TESTE DE CRIA√á√ÉO DE CAMPANHA
        // =====================================================
        console.log('2Ô∏è‚É£ Testando cria√ß√£o de campanha...');
        const createResult = await db.query(`
            INSERT INTO campaigns (campaign_name, campaign_type, message_template, status, total_sent, created_at)
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING *
        `, ['Valida√ß√£o Final', 'promocional', 'Esta √© uma mensagem de teste para valida√ß√£o do sistema de persist√™ncia.', 'rascunho', 0, new Date()]);
        
        const campaignId = createResult[0].id;
        console.log(`   ‚úÖ Campanha criada com ID: ${campaignId}\n`);
        
        // =====================================================
        // 3. TESTE DE ATUALIZA√á√ÉO DE PROGRESSO
        // =====================================================
        console.log('3Ô∏è‚É£ Testando atualiza√ß√£o de estat√≠sticas...');
        await db.query(`
            UPDATE campaigns 
            SET total_sent = $1, total_delivered = $2, updated_at = CURRENT_TIMESTAMP 
            WHERE id = $3
        `, [500, 480, campaignId]);
        console.log('   ‚úÖ Estat√≠sticas atualizadas (500 enviados, 480 entregues)\n');
        
        // =====================================================
        // 4. TESTE DE MUDAN√áA DE STATUS
        // =====================================================
        console.log('4Ô∏è‚É£ Testando mudan√ßas de status...');
        
        // Ativar campanha
        await db.query(`
            UPDATE campaigns 
            SET status = 'ativa', updated_at = CURRENT_TIMESTAMP 
            WHERE id = $1
        `, [campaignId]);
        console.log('   ‚úÖ Campanha ativada');
        
        // Pausar campanha
        await db.query(`
            UPDATE campaigns 
            SET status = 'pausada', updated_at = CURRENT_TIMESTAMP 
            WHERE id = $1
        `, [campaignId]);
        console.log('   ‚úÖ Campanha pausada');
        
        // Finalizar campanha
        await db.query(`
            UPDATE campaigns 
            SET status = 'finalizada', completed_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP 
            WHERE id = $1
        `, [campaignId]);
        console.log('   ‚úÖ Campanha finalizada\n');
        
        // =====================================================
        // 5. TESTE DE INTEGRA√á√ÉO COM SENT_NUMBERS
        // =====================================================
        console.log('5Ô∏è‚É£ Testando integra√ß√£o com sent_numbers...');
        
        // Inserir n√∫meros enviados
        for (let i = 1; i <= 3; i++) {
            await db.query(`
                INSERT INTO sent_numbers (campaign_id, phone_number, status, metadata, sent_at)
                VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
            `, [campaignId, `5511999${i.toString().padStart(6, '0')}`, 'enviado', JSON.stringify({ 
                message: `Mensagem teste ${i}`,
                timestamp: new Date().toISOString()
            })]);
        }
        console.log('   ‚úÖ 3 n√∫meros enviados registrados\n');
        
        // =====================================================
        // 6. TESTE DE CONSULTAS DE RECUPERA√á√ÉO
        // =====================================================
        console.log('6Ô∏è‚É£ Testando consultas de recupera√ß√£o...');
        
        // Buscar campanhas por status
        const finalized = await db.query(`
            SELECT COUNT(*) as total FROM campaigns WHERE status = 'finalizada'
        `);
        console.log(`   üìä Campanhas finalizadas: ${finalized[0].total}`);
        
        // Buscar n√∫meros enviados por campanha
        const sentNumbers = await db.query(`
            SELECT COUNT(*) as total FROM sent_numbers WHERE campaign_id = $1
        `, [campaignId]);
        console.log(`   üì± N√∫meros enviados desta campanha: ${sentNumbers[0].total}`);
        
        // Buscar √∫ltimo estado da campanha
        const campaignState = await db.query(`
            SELECT campaign_name, status, total_sent, total_delivered, created_at, updated_at
            FROM campaigns WHERE id = $1
        `, [campaignId]);
        
        const state = campaignState[0];
        console.log(`   üìã Estado da campanha: ${state.campaign_name}`);
        console.log(`   üìà Status: ${state.status}`);
        console.log(`   üéØ Estat√≠sticas: ${state.total_sent} enviados, ${state.total_delivered} entregues`);
        console.log('   ‚úÖ Recupera√ß√£o de estado funcionando\n');
        
        // =====================================================
        // 7. TESTE DE LIMPEZA
        // =====================================================
        console.log('7Ô∏è‚É£ Limpando dados de teste...');
        await db.query('DELETE FROM sent_numbers WHERE campaign_id = $1', [campaignId]);
        await db.query('DELETE FROM campaigns WHERE id = $1', [campaignId]);
        console.log('   ‚úÖ Dados de teste removidos\n');
        
        // =====================================================
        // 8. VALIDA√á√ÉO FINAL
        // =====================================================
        console.log('üéâ VALIDA√á√ÉO FINAL COMPLETA!\n');
        console.log('‚úÖ TODAS AS FUNCIONALIDADES DE PERSIST√äNCIA VALIDADAS:');
        console.log('   üîó Conex√£o com banco PostgreSQL');
        console.log('   üìù Cria√ß√£o de campanhas');
        console.log('   üìä Atualiza√ß√£o de estat√≠sticas');
        console.log('   üîÑ Mudan√ßas de status (rascunho ‚Üí ativa ‚Üí pausada ‚Üí finalizada)');
        console.log('   üì± Integra√ß√£o com sent_numbers');
        console.log('   üîç Consultas de recupera√ß√£o');
        console.log('   üßπ Limpeza de dados');
        console.log('\nüèÜ O SISTEMA DE PERSIST√äNCIA EST√Å 100% FUNCIONAL E COMPAT√çVEL COM O BANCO!');
        
    } catch (error) {
        console.error('‚ùå ERRO NA VALIDA√á√ÉO:', error.message);
        console.error('üí° Detalhes do erro:', error);
    }
}

finalValidation();
