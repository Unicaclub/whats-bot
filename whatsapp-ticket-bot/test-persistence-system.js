// =====================================================
// TESTE COMPLETO DO SISTEMA DE PERSIST√äNCIA
// =====================================================

require('dotenv').config();
const { getDatabase } = require('./database/manager');
const CampaignStateManager = require('./database/campaign-state-manager');
const CampaignRecoveryManager = require('./database/campaign-recovery-manager');

async function testPersistenceSystem() {
    console.log('üß™ Iniciando teste completo do sistema de persist√™ncia...\n');

    try {
        // =====================================================
        // 1. TESTE DE CONEX√ÉO
        // =====================================================
        console.log('1Ô∏è‚É£ Testando conex√£o com banco...');
        const db = getDatabase();
        const isConnected = await db.testConnection();
        
        if (!isConnected) {
            throw new Error('Falha na conex√£o com o banco');
        }
        console.log('   ‚úÖ Conex√£o estabelecida com sucesso\n');

        // =====================================================
        // 2. TESTE DOS GERENCIADORES
        // =====================================================
        console.log('2Ô∏è‚É£ Testando instancia√ß√£o dos gerenciadores...');
        const stateManager = new CampaignStateManager();
        const recoveryManager = new CampaignRecoveryManager(stateManager);
        console.log('   ‚úÖ Gerenciadores criados com sucesso\n');

        // =====================================================
        // 3. TESTE DE CRIA√á√ÉO DE CAMPANHA
        // =====================================================
        console.log('3Ô∏è‚É£ Testando cria√ß√£o de estado de campanha...');
        
        const campaignConfig = {
            sessionName: 'test',
            totalNumbers: 100,
            batchSize: 10,
            message: 'Mensagem de teste do sistema de persist√™ncia',
            campaignId: 'test-' + Date.now()
        };

        const stateId = await stateManager.createCampaignState(campaignConfig);
        console.log(`   ‚úÖ Estado criado com ID: ${stateId}\n`);

        // =====================================================
        // 4. TESTE DE ATUALIZA√á√ÉO DE PROGRESSO
        // =====================================================
        console.log('4Ô∏è‚É£ Testando atualiza√ß√£o de progresso...');
        
        // Simular processamento de alguns lotes
        for (let batch = 1; batch <= 3; batch++) {
            await stateManager.updateProgress(stateId, {
                currentBatch: batch,
                processedNumbers: batch * 10,
                successCount: batch * 8,
                failedCount: batch * 2
            });
            
            // Registrar detalhes do lote
            await stateManager.saveBatchDetails(stateId, {
                batchNumber: batch,
                numbersInBatch: 10,
                successCount: 8,
                failedCount: 2,
                startTime: new Date(),
                endTime: new Date(),
                avgDelay: 5000
            });
        }
        
        console.log('   ‚úÖ Progresso atualizado para 3 lotes\n');

        // =====================================================
        // 5. TESTE DE INTERRUP√á√ÉO
        // =====================================================
        console.log('5Ô∏è‚É£ Testando interrup√ß√£o de campanha...');
        
        await stateManager.markAsInterrupted(stateId, 'Teste de interrup√ß√£o');
        console.log('   ‚úÖ Campanha marcada como interrompida\n');

        // =====================================================
        // 6. TESTE DE RECUPERA√á√ÉO
        // =====================================================
        console.log('6Ô∏è‚É£ Testando sistema de recupera√ß√£o...');
        
        const interruptedCampaigns = await stateManager.findInterruptedCampaigns();
        console.log(`   üìä Campanhas interrompidas encontradas: ${interruptedCampaigns.length}`);
        
        if (interruptedCampaigns.length > 0) {
            const campaign = interruptedCampaigns[0];
            console.log(`   üîÑ Testando recupera√ß√£o da campanha ${campaign.id}`);
            
            const canRecover = await recoveryManager.canRecoverCampaign(campaign.id);
            console.log(`   üîç Pode recuperar: ${canRecover}`);
            
            if (canRecover) {
                const recoveryData = await recoveryManager.prepareCampaignRecovery(campaign.id);
                console.log(`   üìã Dados de recupera√ß√£o preparados:`);
                console.log(`      - Estado: ${recoveryData.campaign.status}`);
                console.log(`      - Lote atual: ${recoveryData.campaign.current_batch}/${recoveryData.campaign.total_batches}`);
                console.log(`      - N√∫meros processados: ${recoveryData.campaign.processed_numbers}/${recoveryData.campaign.total_numbers}`);
                console.log(`      - Lotes encontrados: ${recoveryData.batches.length}`);
            }
        }
        
        console.log('   ‚úÖ Sistema de recupera√ß√£o testado\n');

        // =====================================================
        // 7. TESTE DE FINALIZA√á√ÉO
        // =====================================================
        console.log('7Ô∏è‚É£ Testando finaliza√ß√£o de campanha...');
        
        await stateManager.completeCampaign(stateId, {
            successCount: 30,
            failedCount: 6,
            duplicateCount: 4,
            totalProcessed: 40
        });
        
        console.log('   ‚úÖ Campanha finalizada com sucesso\n');

        // =====================================================
        // 8. TESTE DE CONSULTAS
        // =====================================================
        console.log('8Ô∏è‚É£ Testando consultas do sistema...');
        
        const campaignDetails = await stateManager.getCampaignDetails(stateId);
        console.log(`   üìä Detalhes da campanha:`);
        console.log(`      - Status: ${campaignDetails.status}`);
        console.log(`      - Criado em: ${campaignDetails.created_at}`);
        console.log(`      - Finalizado em: ${campaignDetails.completed_at}`);
        
        const nextBatch = await stateManager.getNextBatch(stateId);
        console.log(`   üì¶ Pr√≥ximo lote: ${nextBatch ? nextBatch.number : 'N√£o h√° mais lotes'}\n`);

        // =====================================================
        // 9. TESTE DE LIMPEZA
        // =====================================================
        console.log('9Ô∏è‚É£ Testando limpeza autom√°tica...');
        
        const cleanedCount = await stateManager.cleanupOldCampaigns(0); // Limpar campanhas antigas (0 dias = todas)
        console.log(`   üßπ Campanhas limpas: ${cleanedCount}\n`);

        // =====================================================
        // RESULTADO FINAL
        // =====================================================
        console.log('üéâ TESTE COMPLETO FINALIZADO COM SUCESSO!');
        console.log('‚úÖ Todos os componentes do sistema de persist√™ncia est√£o funcionando corretamente');
        console.log('‚úÖ Integra√ß√£o com PostgreSQL confirmada');
        console.log('‚úÖ Sistema pronto para produ√ß√£o\n');

    } catch (error) {
        console.error('‚ùå ERRO NO TESTE:', error);
        console.error('üí° Stacktrace:', error.stack);
        process.exit(1);
    } finally {
        // Fechar conex√µes
        setTimeout(() => {
            process.exit(0);
        }, 1000);
    }
}

// Executar teste
testPersistenceSystem();
