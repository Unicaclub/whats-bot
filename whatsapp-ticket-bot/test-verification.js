// Script de teste para verificar se a implementa√ß√£o da verifica√ß√£o est√° funcionando
require('dotenv').config();
const { getCampaignTracker } = require('./modules/campaignTracker');

async function testVerification() {
    console.log('üß™ Testando sistema de verifica√ß√£o de n√∫meros...\n');
    
    try {
        // Inicializar tracker
        const tracker = getCampaignTracker();
        await new Promise(resolve => setTimeout(resolve, 2000)); // Aguardar inicializa√ß√£o
        
        // N√∫mero de teste (deve existir na base)
        const testNumber = '556792242491'; // Um dos n√∫meros que aparecem no resultado anterior
        
        console.log(`üìû Testando n√∫mero: ${testNumber}`);
        
        // Testar verifica√ß√£o
        const alreadySent = await tracker.checkIfAlreadySent(null, testNumber, '24h');
        
        console.log(`\nüìä Resultado da verifica√ß√£o:`);
        console.log(`   - N√∫mero: ${testNumber}`);
        console.log(`   - J√° foi enviado: ${alreadySent ? 'SIM' : 'N√ÉO'}`);
        console.log(`   - Deve ser ignorado: ${alreadySent ? 'SIM' : 'N√ÉO'}`);
        
        if (alreadySent) {
            console.log(`\n‚úÖ Implementa√ß√£o funcionando! O n√∫mero ${testNumber} foi detectado como j√° existente.`);
            console.log(`   - Este n√∫mero SER√Å IGNORADO na pr√≥xima campanha`);
        } else {
            console.log(`\n‚ö†Ô∏è  N√∫mero ${testNumber} n√£o foi encontrado na base`);
            console.log(`   - Pode ser que n√£o tenha sido enviado nas √∫ltimas 24h`);
        }
        
        // Testar com n√∫mero inexistente
        console.log(`\nüìû Testando n√∫mero inexistente: 5599888777666`);
        const notSent = await tracker.checkIfAlreadySent(null, '5599888777666', '24h');
        console.log(`   - J√° foi enviado: ${notSent ? 'SIM' : 'N√ÉO'}`);
        console.log(`   - Deve ser enviado: ${notSent ? 'N√ÉO' : 'SIM'}`);
        
        if (!notSent) {
            console.log(`\n‚úÖ Implementa√ß√£o funcionando! O n√∫mero inexistente pode ser enviado.`);
        } else {
            console.log(`\n‚ö†Ô∏è  Esse n√∫mero tamb√©m j√° est√° na base. Vamos testar outro...`);
            
            // Testar outro n√∫mero
            console.log(`\nüìû Testando n√∫mero completamente novo: 5511000000001`);
            const notSent2 = await tracker.checkIfAlreadySent(null, '5511000000001', '24h');
            console.log(`   - J√° foi enviado: ${notSent2 ? 'SIM' : 'N√ÉO'}`);
            console.log(`   - Deve ser enviado: ${notSent2 ? 'N√ÉO' : 'SIM'}`);
            
            if (!notSent2) {
                console.log(`\n‚úÖ Implementa√ß√£o funcionando! O n√∫mero novo pode ser enviado.`);
            }
        }
        
        console.log('\nüéØ L√ìGICA IMPLEMENTADA:');
        console.log('   1. Para cada n√∫mero da campanha');
        console.log('   2. Verificar se j√° existe na tabela sent_numbers (√∫ltimas 24h)');
        console.log('   3. Se J√Å EXISTE: ignorar e ir para o pr√≥ximo');
        console.log('   4. Se N√ÉO EXISTE: enviar normalmente');
        console.log('   5. Evitar duplicatas e respeitar hist√≥rico de envios');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    }
}

// Executar teste
testVerification()
    .then(() => {
        console.log('\n‚úÖ Teste conclu√≠do!');
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå Erro:', error);
        process.exit(1);
    });
